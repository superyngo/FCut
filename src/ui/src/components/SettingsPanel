<script setup lang="ts">
  import { computed } from "vue";
  import { useAPP_STATE } from "../stores/app";
  import { logger } from "../utils/logger";
  import type { Task } from "./TaskList.vue"; // Ensure Task type is imported

  const app_state = useAPP_STATE();

  // Use computed for reactivity
  const isPanelOpen = computed(() => store.isSettingsPanelOpen);
  const task = computed(() => store.currentTaskForSettings);

  const closePanel = () => {
    store.closeSettingsPanel();
  };

  const updateSetting = (key: string, value: any) => {
    if (task.value && task.value.settings) {
      // Create a new object to ensure reactivity if needed, or modify directly
      // For direct modification:
      task.value.settings[key] = value;

      // If deep reactivity is an issue, consider replacing the settings object:
      // task.value.settings = { ...task.value.settings, [key]: value };

      logger.debug(`Updated setting ${key} for task ${task.value.id}:`, value);
      // NOTE: Changes are currently only in the frontend state.
      // Implement saving logic here if needed (e.g., call a store action or API).
    }
  };

  // Helper to determine input type (can be expanded)
  const getInputType = (value: any): string => {
    if (typeof value === "number") return "number";
    if (typeof value === "boolean") return "checkbox";
    // Add more specific types like 'color', 'file', 'range' based on key or value patterns
    return "text";
  };
</script>

<template>
  <div
    v-if="isPanelOpen && task"
    class="settings-panel-overlay"
    @click.self="closePanel"
  >
    <!-- Close on overlay click -->
    <div class="settings-panel">
      <div class="panel-header">
        <h3>
          Settings for {{ task.name }}
          <span v-if="task.renderMethod">({{ task.renderMethod }})</span>
        </h3>
        <button
          @click="closePanel"
          class="close-button"
          aria-label="Close settings"
        >
          &times;
        </button>
      </div>
      <div class="panel-content">
        <form
          v-if="task.settings && Object.keys(task.settings).length > 0"
          @submit.prevent
        >
          <!-- Prevent default form submission -->
          <div
            v-for="(value, key) in task.settings"
            :key="key"
            class="form-group"
          >
            <label :for="`setting-${String(key)}`">{{
              String(key).replace(/_/g, " ")
            }}</label>
            <!-- Improve label readability -->

            <input
              v-if="getInputType(value) === 'text'"
              type="text"
              :id="`setting-${String(key)}`"
              :value="value"
              @input="
                updateSetting(
                  String(key),
                  ($event.target as HTMLInputElement).value
                )
              "
              class="form-control"
            />
            <input
              v-else-if="getInputType(value) === 'number'"
              type="number"
              :id="`setting-${String(key)}`"
              :value="value"
              @input="
                updateSetting(
                  String(key),
                  parseFloat(($event.target as HTMLInputElement).value) || 0
                )
              "
              class="form-control"
            />
            <input
              v-else-if="getInputType(value) === 'checkbox'"
              type="checkbox"
              :id="`setting-${String(key)}`"
              :checked="value"
              @change="
                updateSetting(
                  String(key),
                  ($event.target as HTMLInputElement).checked
                )
              "
              class="form-check"
            />
            <!-- Add more input types based on key or value patterns if needed -->
            <!-- Example: Dropdown for specific keys -->
            <!-- <select v-else-if="key === 'some_option'" ...> -->

            <span v-else class="unsupported-type">
              (Unsupported Type: {{ typeof value }})</span
            >
          </div>
        </form>
        <div v-else class="no-settings">
          No specific settings available or configured for this task/method yet.
        </div>
      </div>
      <div class="panel-footer">
        <!-- Add Save button if persistence is needed -->
        <!-- <button @click="saveSettings">Save Changes</button> -->
        <button @click="closePanel" class="button-secondary">Close</button>
      </div>
    </div>
  </div>
</template>

<style scoped>
  .settings-panel-overlay {
    position: fixed;
    inset: 0; /* Equivalent to top: 0; left: 0; width: 100%; height: 100%; */
    background-color: rgba(0, 0, 0, 0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    backdrop-filter: blur(2px); /* Optional: blur background */
  }

  .settings-panel {
    background-color: var(--vscode-sideBar-background, white);
    color: var(--vscode-sideBar-foreground, black);
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    width: 90%;
    max-width: 550px; /* Adjust max width */
    max-height: 85vh; /* Limit height */
    display: flex;
    flex-direction: column;
    border: 1px solid var(--vscode-contrastBorder, #ccc);
  }

  .panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid var(--vscode-editorGroup-border, #eee);
    padding-bottom: 12px;
    margin-bottom: 18px;
    flex-shrink: 0; /* Prevent header from shrinking */
  }

  .panel-header h3 {
    margin: 0;
    font-size: 1.25em;
    font-weight: 600;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  .panel-header h3 span {
    font-weight: normal;
    font-size: 0.9em;
    color: var(--vscode-descriptionForeground, #777);
  }

  .close-button {
    background: none;
    border: none;
    font-size: 2em;
    font-weight: bold;
    color: var(--vscode-icon-foreground, #666);
    cursor: pointer;
    padding: 0 8px;
    line-height: 1;
    transition: color 0.2s ease;
  }
  .close-button:hover {
    color: var(--vscode-foreground, black);
  }

  .panel-content {
    overflow-y: auto; /* Allow scrolling for content */
    flex-grow: 1; /* Allow content to take available space */
    padding-right: 10px; /* Space for scrollbar */
    margin-right: -10px; /* Counteract padding */
  }

  /* Custom Scrollbar */
  .panel-content::-webkit-scrollbar {
    width: 8px;
  }
  .panel-content::-webkit-scrollbar-track {
    background: var(--vscode-scrollbarSlider-background, #f1f1f1);
    border-radius: 4px;
  }
  .panel-content::-webkit-scrollbar-thumb {
    background: var(--vscode-scrollbarSlider-activeBackground, #888);
    border-radius: 4px;
  }
  .panel-content::-webkit-scrollbar-thumb:hover {
    background: var(--vscode-scrollbarSlider-hoverBackground, #555);
  }

  .form-group {
    margin-bottom: 18px;
  }

  .form-group label {
    display: block;
    margin-bottom: 6px;
    font-weight: 500;
    font-size: 0.95em;
    text-transform: capitalize; /* Nicer display for keys */
    color: var(--vscode-input-placeholderForeground, #666);
  }

  .form-control,
  select.form-control {
    /* Style select similarly if added */
    width: 100%;
    padding: 9px 12px;
    border: 1px solid var(--vscode-input-border, #ccc);
    border-radius: 4px;
    box-sizing: border-box; /* Include padding in width */
    background-color: var(--vscode-input-background, white);
    color: var(--vscode-input-foreground, black);
    font-size: 1em;
  }
  .form-control:focus {
    outline: none;
    border-color: var(--vscode-focusBorder, #007acc);
    box-shadow: 0 0 0 1px var(--vscode-focusBorder, #007acc);
  }

  .form-check {
    margin-left: 8px;
    vertical-align: middle;
    width: 18px; /* Adjust size */
    height: 18px; /* Adjust size */
    accent-color: var(
      --vscode-button-background,
      #007acc
    ); /* Style checkbox color */
  }
  /* Align checkbox label properly */
  .form-group label + .form-check {
    margin-left: 0;
    margin-right: 8px;
    float: left; /* Or use flexbox on the container */
  }

  .unsupported-type {
    font-style: italic;
    color: var(--vscode-descriptionForeground, #888);
    font-size: 0.9em;
    margin-left: 10px;
  }

  .no-settings {
    color: var(--vscode-descriptionForeground, #888);
    text-align: center;
    padding: 20px;
    font-style: italic;
  }

  .panel-footer {
    border-top: 1px solid var(--vscode-editorGroup-border, #eee);
    padding-top: 15px;
    margin-top: 20px;
    text-align: right;
    flex-shrink: 0; /* Prevent footer from shrinking */
  }

  /* Basic Button Styling (Consider a shared button component) */
  button {
    padding: 8px 15px;
    border: 1px solid transparent;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.95em;
    transition: background-color 0.2s ease, color 0.2s ease;
    margin-left: 10px;
  }

  button:first-child {
    margin-left: 0;
  }

  /* Primary button style (example) */
  button.button-primary {
    background-color: var(--vscode-button-background, #007acc);
    color: var(--vscode-button-foreground, white);
  }
  button.button-primary:hover {
    background-color: var(--vscode-button-hoverBackground, #005a9e);
  }

  /* Secondary button style (example) */
  button.button-secondary {
    background-color: var(--vscode-button-secondaryBackground, #5f6a79);
    color: var(--vscode-button-secondaryForeground, white);
    border: 1px solid var(--vscode-contrastBorder, transparent);
  }
  button.button-secondary:hover {
    background-color: var(--vscode-button-secondaryHoverBackground, #4c5561);
  }
</style>
